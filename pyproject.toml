[project]
name = "knowledge-graph"
version = "0.12.1"
description = ""
authors = [
    {name = "CPR Data Science", email = "dsci@climatepolicyradar.org"}
]
license = {text = "Apache 2.0"}
readme = "README.md"
requires-python = ">=3.13,<3.14"

dependencies = [
    "pydantic-ai>=0.0.53",
    "rich>=13.7.0",
    "ipykernel>=6.29.3",
    "neomodel>=5.3.3",
    "rapidfuzz>=3.10.0",
    "python-dotenv>=1.0.1",
    "more-itertools>=10.3.0",
    "argilla>=2.5",
    "griffe==1.5.7",
    "cpr-sdk==1.19.1",
    "wandb>=0.21.0",
    "boto3>=1.35.31",
    "pyvespa>=0.54.0",
    "pyyaml>=6.0.2",
    "nltk>=3.9.1",
    "datasets>=2.18.0",
    "boto3-stubs[s3,cloudwatch,ssm]>=1.35.93",
    "typer==0.15.1",
    "schedule>=1.2.2",
    "awscli>=1.37.24",
    "prefect[aws,slack]>=3.4.7",
    "httpx>=0.28.1",
    "tenacity>=9.1.2",
    "requests>=2.32.3",
    "aioboto3>=14.3.0",
    "types-aioboto3[s3]>=14.3.0",
    "pytest-aioboto3>=0.6.0",
    "coiled>=1.115.0",
    "prefect-coiled>=0.0.4",
]

[project.optional-dependencies]
transformers = [
    "torch>=2.8.0",
    "sentence-transformers>=5.1.0",
    "transformers[torch]>=4.55.0",
    "scikit-learn>=1.6.1",
    "accelerate>=1.6.0",
]
# https://docs.coiled.io/user_guide/software/docker.html
# https://docs.coiled.io/user_guide/software/package-sync-advanced.html
coiled = [
    "cloudpickle>=3.1.1",
    "coiled>=1.117.0",
    "dask>=2025.7.0",
    "distributed>=2025.7.0",
    "msgpack>=1.1.1",
    "prefect-coiled>=0.0.4",
    "tornado>=6.5.1",
]
dev = [
    "azure-pdf-parser @ git+https://github.com/climatepolicyradar/azure-pdf-parser.git@v0.4.3",
    "pytest>=8.3.2",
    "hypothesis>=6.112.2",
    "mkdocs-material>=9.5.39",
    "pre-commit>=3.8.0",
    "boto3>=1.35.32",
    "syrupy>=4.7.1",
    "moto[s3]>=5.0.16",
    "pytest-env>=1.1.5",
    "pytest-asyncio>=0.24.0",
    "pulumi>=3.145.0",
    "pulumi-aws>=6.66.2",
    "jinja2>=3.1.4",
    "pyright>=1.1.403",
    "duckdb>=1.3.2",
    "pytest-xdist[psutil]>=3.8.0",
]

[project.scripts]
train = "scripts.train:app"
promote = "scripts.promote:app"
demote = "scripts.demote:app"
evaluate = "scripts.evaluate:app"
infer = "scripts.infer:app"
update-inference-classifiers = "scripts.update_classifier_spec:app"
deploy = "scripts.deploy:app"


[tool.pytest.ini_options]
env = [
  "AWS_ENV=sandbox",
  "WIKIBASE_USERNAME=test_username",
  "WIKIBASE_PASSWORD=test_password",
  "WIKIBASE_URL=https://test.test.test",
  "ARGILLA_API_URL=http://localhost:6900",
  "ARGILLA_API_KEY=argilla.apikey",
  "WANDB_API_KEY=test_wandb_api_key"
]
markers = ["vespa", "transformers"]
asyncio_default_fixture_loop_scope = "function"

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.metadata]
allow-direct-references = true

[tool.hatch.build.targets.wheel]
packages = ["src"]

[tool.ruff]
lint.select = ["E", "F", "D", "I"]
# Docstring Ignores:
# D100 - Missing docstring in public module
# D103 - Missing docstring in public function
# D104 - Missing docstring in public package
# D107 - Missing docstring in __init__
# D202 - No blank lines allowed after function docstring
# D203 - 1 blank line required before class docstring
# D213 - Multi-line docstring summary should start at the first line
# D400 - First line should end with a period
# D401 - First line should be in imperative mood
# D406 - Section name should end with a newline
# D407 - Missing dashed underline after section
# D413 - Missing blank line after last section
# D415 - First line should end with a period, question mark, or exclamation point
lint.ignore = [
  "D100",
  "D103",
  "D104",
  "D107",
  "D202",
  "D203",
  "D212",
  "D400",
  "D401",
  "D406",
  "D407",
  "D413",
  "D415",
  "E501",
]
line-length = 88

# Ignore `E402` (import violations) in all `__init__.py` files, and `E501` (line too long) in all files in the `tests` directory
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["E501"]

[tool.pyright]
reportMissingImports = false

[tool.uv.pip]
# PyTorch CPU-only index for Linux/Windows (non-macOS platforms)
extra-index-url = ["https://download.pytorch.org/whl/cpu"]
index-strategy = "unsafe-best-match"
resolution = "highest"
prerelease = "if-necessary"
compile-bytecode = true

[tool.uv.workspace]
# Empty workspace for now, can add members as needed
members = []
