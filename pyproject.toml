[tool.poetry]
name = "knowledge_graph"
version = "0.1.6"
description = ""
authors = ["CPR Data Science <dsci@climatepolicyradar.org>"]
license = "Apache 2.0"
readme = "README.md"
packages = [
  { include = "src", from = "." },
  { include = "tests", from = "." },
  { include = "scripts", from = "." },
  { include = "static_sites", from = "." },
]

[tool.poetry.dependencies]
python = ">=3.10,<3.11"
rich = "^13.7.0"
tqdm = "^4.66.2"
ipykernel = "^6.29.3"
neomodel = "^5.3.3"
rapidfuzz = "^3.10.0"
python-dotenv = "^1.0.1"
more-itertools = "^10.3.0"
argilla = ">=2.5"
griffe = "1.5.7"
cpr-sdk = "^1.17.0"
wandb = "^0.18.3"
boto3 = "^1.35.31"
pyvespa = "^0.54.0"
pyyaml = "^6.0.2"
nltk = "^3.9.1"
datasets = "^2.18.0"
boto3-stubs = {extras = ["s3"], version = "^1.35.93"}
typer = "0.15.1"
schedule = "^1.2.2"
awscli = "^1.37.24"
prefect = {extras = ["slack"], version = "^3.3.1"}
pydantic-ai = "^0.0.53"
httpx = "^0.28.1"

[tool.poetry.group.transformers]
optional = true

[tool.poetry.group.transformers.dependencies]
torch = {version = "2.4.1+cpu", source = "pytorch"}
sentence-transformers = "^3.1.1"
transformers = {extras = ["torch"], version = "^4.51.3"}
scikit-learn = "^1.6.1"
accelerate = "^1.6.0"


[[tool.poetry.source]]
name = "pytorch"
url = "https://download.pytorch.org/whl/cpu"
priority = "explicit"


[tool.poetry.scripts]
train = "scripts.train:app"
promote = "scripts.promote:app"
demote = "scripts.demote:app"
evaluate = "scripts.evaluate:app"
infer = "scripts.infer:app"
update_inference_classifiers = "scripts.update_classifier_spec:app"
deploy = "scripts.deploy:app"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
azure_pdf_parser = { git = "https://github.com/climatepolicyradar/azure-pdf-parser.git", tag = "v0.4.3" }
pytest = "^8.3.2"
hypothesis = "^6.112.2"
mkdocs-material = "^9.5.39"
pre-commit = "^3.8.0"
boto3 = "^1.35.32"
syrupy = "^4.7.1"
moto = {extras = ["s3"], version = "^5.0.16"}
pytest-env = "^1.1.5"
pytest-asyncio = "^0.24.0"
pulumi = "^3.145.0"
pulumi-aws = "^6.66.2"
jinja2 = "^3.1.4"


[tool.pytest.ini_options]
env = [
  "AWS_ENV=sandbox",
  "WIKIBASE_USERNAME=test_username",
  "WIKIBASE_PASSWORD=test_password",
  "WIKIBASE_URL=https://test.test.test"
]
markers = ["vespa", "flaky_on_ci", "transformers"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
lint.select = ["E", "F", "D", "I"]
line-length = 88
# Docstring Ignores:
# D100 - Missing docstring in public module
# D103 - Missing docstring in public function
# D104 - Missing docstring in public package
# D107 - Missing docstring in __init__
# D202 - No blank lines allowed after function docstring
# D203 - 1 blank line required before class docstring
# D213 - Multi-line docstring summary should start at the first line
# D400 - First line should end with a period
# D401 - First line should be in imperative mood
# D406 - Section name should end with a newline
# D407 - Missing dashed underline after section
# D413 - Missing blank line after last section
# D415 - First line should end with a period, question mark, or exclamation point
lint.ignore = [
  "D100",
  "D103",
  "D104",
  "D107",
  "D202",
  "D203",
  "D212",
  "D400",
  "D401",
  "D406",
  "D407",
  "D413",
  "D415",
  "E501",
]

# Ignore `E402` (import violations) in all `__init__.py` files, and `E501` (line too long) in all files in the `tests` directory
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]
"tests/*" = ["E501"]

[tool.pyright]
reportMissingImports = false
