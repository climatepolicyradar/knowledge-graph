from typing import Literal, Optional

from pydantic import BaseModel, Field, model_validator


class Source(BaseModel):
    """Source of the passage"""

    type: Literal["Synthetic", "Natural"]
    model: Optional[str]
    prompt: Optional[str]
    document_id: Optional[str]

    @model_validator(mode="after")
    def check_source(self):
        """Check whether the source is valid"""
        if self.type == "Synthetic":
            if not self.model:
                raise ValueError("model must be provided for synthetic passages")
            if not self.prompt:
                raise ValueError("prompt must be provided for synthetic passages")
        elif self.type == "Natural":
            if not self.document_id:
                raise ValueError("document_id must be provided for natural passages")
        return self


class Passage(BaseModel):
    """Raw passage object"""

    text: str
    source: Source


class SyntheticPassageWithConfidence(BaseModel):
    """
    Text for active learning generated by an LLM

    When generating these, we prompt the LLM to return an expected confidence relative to the classifier.
    This is stored in the `expected_confidence` field, and denotes the probability the LLM thought this
    passage will have when passed to the classifier.
    """

    text: str
    expected_confidence: float = Field(ge=0.0, le=1.0)


class SyntheticPassageWithClassifierConfidence(BaseModel):
    """
    Text generated for active learning with expected and actual confidence

    After a `SyntheticPassageWithConfidence` is generated, we pass it to the classifier to get the actual confidence.
    This is stored in the `actual_confidence` field, and denotes the probability of this passage containing the concept
    according to our classifier.
    """

    text: str
    expected_confidence: float = Field(ge=0.0, le=1.0)
    actual_confidence: float = Field(ge=0.0, le=1.0)
