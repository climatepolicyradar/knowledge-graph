name: ci
on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install poetry
        shell: bash
        run: pipx install poetry==1.8.2

      - name: Install just
        run: pipx install rust-just

      - name: Install python or load from cache with dependencies
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
          cache: poetry

      - name: Install dependencies
        run: poetry install --with dev

      - name: Lint
        run: |
          poetry run pre-commit install
          poetry run pre-commit run --all-files --show-diff-on-failure

      - name: Install latest Vespa CLI
        env:
          VESPA_CLI_VERSION: 8.250.43
        run: |
          mkdir vespa-cli
          curl -fsSL https://github.com/vespa-engine/vespa/releases/download/v${VESPA_CLI_VERSION}/vespa-cli_${VESPA_CLI_VERSION}_linux_amd64.tar.gz | \
            tar -zxf - -C vespa-cli --strip-component=1
          echo "vespa-cli/bin" >> $GITHUB_PATH

      - name: Setup local Vespa
        run: just vespa_dev_setup

      - name: Test
        run: just test -v -m "'not flaky_on_ci'"

  deploy_docs:
    if: github.ref == 'refs/heads/main'
    needs: [test]
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Install poetry
        shell: bash
        run: pipx install poetry==1.8.2

      - name: Install python or load from cache with dependencies
        uses: actions/setup-python@v5
        with:
          python-version-file: .python-version
          cache: poetry

      - name: Install dependencies
        run: poetry install

      - name: Deploy docs
        working-directory: ./docs
        run: poetry run mkdocs gh-deploy --force

  deploy_prefect_sandbox:
    if: github.ref == 'refs/heads/main'
    needs: [test]
    uses: ./.github/workflows/prefect_deploy.yml
    with:
      aws-env: sandbox
      prefect-workspace: ${{ vars.PREFECT_WORKSPACE }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_SANDBOX }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_SANDBOX }}
      PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}

  deploy_prefect_labs:
    if: github.ref == 'refs/heads/main'
    needs: [deploy_prefect_sandbox]
    uses: ./.github/workflows/prefect_deploy.yml
    with:
      aws-env: labs
      prefect-workspace: ${{ vars.PREFECT_WORKSPACE }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_LABS }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_LABS }}
      PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}

  deploy_prefect_staging:
    if: github.ref == 'refs/heads/main'
    needs: [deploy_prefect_sandbox]
    uses: ./.github/workflows/prefect_deploy.yml
    with:
      aws-env: staging
      prefect-workspace: ${{ vars.PREFECT_WORKSPACE }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
      PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}

  deploy_prefect_prod:
    if: github.ref == 'refs/heads/main'
    needs: [deploy_prefect_sandbox]
    uses: ./.github/workflows/prefect_deploy.yml
    with:
      aws-env: prod
      prefect-workspace: ${{ vars.PREFECT_WORKSPACE }}
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
      PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}
