name: CI

on:
  pull_request:
    # Run on all pull requests, regardless of target branch
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  lint:
    runs-on: ubuntu-latest
    name: "Lint"
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install just
        run: pipx install rust-just

      - name: Install python or load from cache with dependencies
        uses: actions/setup-python@v5
        with:
          python-version-file: pyproject.toml

      - name: Install dependencies
        run: just install

      - name: Run linting
        run: just lint-all

  test:
    runs-on: ubuntu-latest
    name: "Test"
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install just
        run: pipx install rust-just

      - name: Install python or load from cache with dependencies
        uses: actions/setup-python@v5
        with:
          python-version-file: pyproject.toml

      - name: Install dependencies
        run: just install

      - name: Install latest Vespa CLI
        env:
          VESPA_CLI_VERSION: 8.250.43
        run: |
          mkdir vespa-cli
          curl -fsSL https://github.com/vespa-engine/vespa/releases/download/v${VESPA_CLI_VERSION}/vespa-cli_${VESPA_CLI_VERSION}_linux_amd64.tar.gz | \
            tar -zxf - -C vespa-cli --strip-component=1
          echo "vespa-cli/bin" >> $GITHUB_PATH

      - name: Setup local Vespa
        run: just vespa_dev_setup

      - name: Run tests
        run: just test

  build:
    runs-on: ubuntu-latest
    name: "Build"
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Remove unused software
        # This is a "works for now" step. The underlying runner may
        # change. Don't block CI on this.
        continue-on-error: true
        run: |
          # Space before
          df -h
          # .Net
          sudo rm -rf /usr/share/dotnet || true &
          # Android
          sudo rm -rf /usr/local/lib/android || true &
          # GHC
          sudo rm -rf /opt/ghc || true &
          sudo rm -rf /usr/local/.ghcup || true &
          # CodeQL
          sudo rm -rf /opt/hostedtoolcache/CodeQL || true &
          # Wait for all removlas
          wait
          # Space after
          df -h

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Install just
        run: pipx install rust-just

      - name: Get version
        id: get_version
        run: |
          VERSION=$(just get-version)
          echo "version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: false
          load: true
          tags: dummy/${{ github.event.repository.name }}:${{ steps.get_version.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Confirm Prefect binary availability
        run: docker run --rm dummy/${{ github.event.repository.name }}:${{ steps.get_version.outputs.version }} prefect version

      - name: Confirm dependencies availability
        run: docker run --rm dummy/${{ github.event.repository.name }}:${{ steps.get_version.outputs.version }} python -c "import aioboto3; print('aioboto3 imported successfully')"

  deploy_prefect_sandbox:
    name: "Deploy"
    needs: [test, build]
    uses: ./.github/workflows/prefect_deploy.yml
    with:
      aws-env: sandbox
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_SANDBOX }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_SANDBOX }}
      PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}
      PREFECT_API_URL: ${{ secrets.PREFECT_API_URL }}
