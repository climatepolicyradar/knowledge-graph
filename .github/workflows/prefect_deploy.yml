name: Deploy

on:
  workflow_call:
    inputs:
      aws-env:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      PREFECT_API_KEY:
        required: true
      PREFECT_API_URL:
        required: true

concurrency:
  group: deploy-${{ inputs.aws-env }}
  cancel-in-progress: ${{ github.ref == 'refs/heads/main' }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository code
        uses: actions/checkout@v5

      - name: Remove unused software
        uses: jlumbroso/free-disk-space@v1.3.1
        with:
          tool-cache: false
          android: true
          dotnet: true
          haskell: true
          large-packages: false
          docker-images: false
          swap-storage: true

      - uses: extractions/setup-just@v3
        with:
          just-version: 1.36.0

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Install dependencies
        run: uv sync --locked

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4.3.1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get version
        id: get_version
        run: |
          VERSION=$(just get-version)
          echo "version: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      - name: List knowledge_graph directory
        run: |
          du -sh knowledge_graph/*
          ls -la knowledge_graph/*
          ls -la knowledge_graph/
      - name: Build the Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          load: true
          push: true
          tags: |
            ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ steps.get_version.outputs.version }}
            ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ github.sha }}
            ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:latest
          cache-from: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:buildcache
          cache-to: type=registry,ref=${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:buildcache,mode=max

      - name: Confirm Prefect binary availability
        run: docker run --rm ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ steps.get_version.outputs.version }} prefect version

      - name: Confirm Coiled binary availability
        run: docker run --rm ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ steps.get_version.outputs.version }} coiled --version

      - name: Confirm dependencies availability
        run: docker run --rm ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ steps.get_version.outputs.version }} python -c "import aioboto3; print('aioboto3 imported successfully')"

      # AWS_ENV is needed, for now, since there's a module with a
      # side-effect that calls the OS environment.
      - name: Confirm package availability
        run: docker run --rm -e AWS_ENV=${{ inputs.aws-env }} ${{ steps.login-ecr.outputs.registry }}/${{ github.event.repository.name }}:${{ steps.get_version.outputs.version }} python -c "import flows.inference; print('flows.inference imported successfully')"

      - name: Deploy to Prefect
        env:
          AWS_ENV: ${{ inputs.aws-env }}
          AWS_REGION: eu-west-1
          DOCKER_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          DOCKER_REPOSITORY: ${{ github.event.repository.name }}
          DOCKER_TAG: ${{ steps.get_version.outputs.docker_tag }}
          PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}
          PREFECT_API_URL: ${{ secrets.PREFECT_API_URL }}
        run: |
          uv run python -m deployments
          uv run python -m automations
